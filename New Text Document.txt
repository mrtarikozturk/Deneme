=> Expo sektorde cok kullanilmiyor. 
=> Expo'da her sey hazir paket olarak gelir. Ancak icerisinde cok fazla paket yuklu oldugu icin cikti alindiginda proje boyutu cok fazla cikar. 
=> Expo, bazi paketleri de desteklememektedir. 
=> Hybrid cozumler olarak Cordova, Iconic, Visual Studio birer cozumdur. 
=> Native cozumler olarak Java ve Kotlin android tarafinda, Obj-C ve Swift ise iOS tarafi cozumlerdir.
=> Cross-platform cozumler icin ise react-native, fultter ve xamarin cozumleri vardir.
=> Proje olusturmak icin projeyi nerede olusturmak istiyorsaniz orada terminali acip "npx react-native init proje_adi" demeniz yeterlidir. 
=> Kendi telefonumuzu kullanmak icin ayarlar kisminda yazilim surmunu 4-5 defa basmak gerekir. 
=> Proje calistirildiginda node terminali acilir. Bu terminal kapatilmamalidir. 
=> Node terminalinde r harfine basildiginda projeyi yeniler. d harfine basildiginda ise developer modu acar. 
=> console.log ciktilari node terminali uzerinden takip edilir.
=> React-native'de her sey component'tir. Iki tur component vardir. Function component ve class component.
=> App.js dosyasi default olarak gelir. Biz best practice olarak dizinde src klasoru olusturur ve App.js dosyasini bu klasor icerisine tasiriz. Ayni zamanda bundan sonra olusturulacak olan tum componentlar da bu klasor icerisinde olusturulacak. Bunu yaptiktan sonra da index.js icerisinde App component'inin import edildigi adresi guncellemek gerekir.
=> index.js icerisinde bulunan AppRegistry.registerComponent() metodu belirlenen component'i baslangic component'i olarak belirler.
=> Her component'in kendine ozel property'leri vardir. 
=> Component'lara stil vermek icin style attribute'i kullanilir. Deger verirken {} icerisine object tipinde veri alir. Dolayisyla iki parantez olmus olur. Stil ozellikleri object formatta key-value olarak verilir. 
=> Stil ozelliklerine verilen degerler bir object property'si olacagi icin string formatta verilir. Her ne kadar yazilan ozellikler css ozellikleri olsa da aslinda yazilan kod js kodudur. Css ozellikleri bir js object verisi ile gonderilir. 
=> SafeAreaView component'i iPhone cihazlarda yukaridaki centiklerden kurtulmak icin kullanilir. Andorid gelistirirken kullanilmasina gerek yoktur. 
=> Genymotion ya da gercek cihazi calistirdiktan sonra console'da adb devices komutunu calistirip cihazin bagli olmadigi kotrol edilmelidir. 
=> Index.js dosyasinda default olarak calistirilacak olan component'in adresi dogru degilse "undefined Unable to resolve module `./App` from `index.js` hatasi verir. 
=> Mobil uygulama gelistirirken arayuz islemleri icin react-native kullanilir, react'in kendi ic yapilari icin -state tanimlama, degisken guncelleme, ekrana bir sey gonderme- react modulu kullanilir.
=> React-native'de her component'in attribute'lari vardir. react-native'de herhangi bir attribute'a deger vermek icin {} parantezler kullanilir.
=> css'tec lower kebab case kullanilirken react-native'de css stil verirken camel case kullanilir.
=> react-native'de stil verirken enum degerler string olarak verilir. 
=> react-native'de px yapisi yoktur. Sadece sayisal olarak deger verilir. 
=> Inline style tercih edilen bir durum degildir. Kod okunabilirligini azaltir.   
=> Component ve API basligi altindaki hersey react-native kutuphanesinden cagrilir. 
=> react-native'de stil vermek icin StyleSheet API'si kullanilir. 
=> Kullanici arayuz islemleri icin component'lar kullanilirken native thread islemlerini ise API'ler ile yapilir. 
=> Stillendime yapilirken en distaki component genel olarak container olarak isimlendirilir.
=> StyleSheet API ile style nesnesi olusturulduktan sonra style attribute'una bu object verilirken artik tek {} icerisinde verilir. 
=> developer menude Disable Fast Refresh ozelligi sayesinde yapilan degisiklikler belge kaydedildigi anda otomatik olarak yansir. Bu ozelliler kapatilirsa yani Disable yapilirsa artik degisiklikler anlik yansimaz. 
=> AccessibilityInfo API'si kullanici durumlarina gore tasarim yapilmasini saglar. Ornegin renk koru olan biri icin nasil bir durumun olacagi bu API sayesinde belirlenir. Bu nedenle oldukca onemlidir. 
=> Her component fonksiyonu sadece bir tane component doner. Dolayisiyla en dista sadece bir tane component olmasi gerekir. Aksi takdirde "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? hatasi verir." 
=> StyleSheet kullanilmadan da style verilebilir. Ancak StyleSheet kullanilmasi durumunda native taraf ile iletisim kurar ve daha saglikli bir yapi ortaya konur. Ayrica inttelisense destegi de verir. 
=> Thread'lar arasinda denge olmalidir. Birbirlerini ignore etmemelidirler.
=> Custom olarak olusturulan Component export edilmez ise "Component Exception" hatasi verir. 
=> "Can't find variable" hatalari genelde import hatalaridir. Import'larin kontrol edilmesi cozumu getirecektir.
=> Hatalar uygulamanin gelistirici ile konusmasi demektir. 
=> JSX, js ile xml karisimi bir yapidir.   
=> Herhangi bir js kodunu JSX icerisinde kullanmak icin {} parantezler kullanilir.  
=> Ekranda yazdirilmak istenen text'ler mutlaka bir Text component'i icerisinde olmalidir. Aksi taktirde "Component Exception Text strings must be rendered within a<Text> component" hatasi verir. 
=> Component'larda return ifadesi jsx yapisi dondurur. Bu jsx yapisi icerisinde JS yazmak icin {} parantezler kullanilir. return() parantezleri disinda istenilen sekilde js kodu yazilabilir. 
=> return() metodu disinda olusturulan herhangi bir fonksiyon icerisinde de <Text>Merhaba Clarusway</Text> seklinde bir ifade return edilebilir. 
=> Bir fonksiyondan component return edilecek ise bu tek bir component olmak zorundadir. Cunku sadece tek bir component yapisi return edilebilir. Bir js dosyasi icerisinde istedigimiz kadar component return eden fonksiyon olusturup kullanabiliriz.
=> Component donduren bir fonskiyonda return ifadesi ile birlikte okunabilirligi saglamak icin jsx kodlari () icerisinde yazilabilir. Yazmak sart degildir. Tek bir component dondurmesine dikkat edilmelidir. 
=> Fonksiyonlari component donduren fonksiyon icerisinde yazmak daha saglikli olur. 
=> {isAdmin ? <Text>Admin Kullanicisi</Text> : null} veya {isAdmin && <Text>Admin Kullanicisi</Text>} seklinde bir kullanim da mevcuttur. Dogrudan JSX icerisinde bu sekilde kullanilabilir.
=> Ne olursa olsun component'lar arasinda js kodlari {} parantezler arasinda yazilir. 
=> If-else bloklari icerisinde her iki durumda da return yapilacak ise else blogunun yazilmasina gerek yoktur. Sadece if blogu yazildiktan sonra else blogundan return edilecek cikti if ile ayni hizada yazilir. =>
function MyFunction2() {
  const isAdmin = true;
  if (isAdmin) return <Text>Admin Kullanicisi</Text>
  return <Text>Uye Kullanicisi</Text>
}
=> Array seklindeki bir listeyi ekrana basmak icin react-native'de kullanisli olan yapi map() fonksiyonudur. JS'de foreach kullanilirken burada map daha kullanislidir. 
=> map() fonksiyonundan geriye donen component dizisi dogrudan jsx iceirisinde render edilebilir. Yani tekrardan array elemanlarinin teker teker js'de oldugu gibi conponent icerisine aktarilmasina gerek yoktur. {} icerisinde belirtilmesi yeterli olacaktir.
=> map() fonksiyonu kullanirken arguman olarak verilen callback fonksiyonun geriye deger dordurmesi unutulmamalidir. genelde arrow function kullanildigi ve tek satirlik ifadelerde return kullanilmadigi icin birden fazla {} parantez kullanildigi durumlarda unutulabiliyor. Bu nedenle dikkat edilmelidir. 
=> JSX yapisi array tipindeki degiskenleri kendisi parcalar ve ekrana basar.
=> Debug mode'da Debug sekmesine basildiginda google chrome acilacaktir. Bu sayfanin debug console'u mobil gelistirme sirasinda kullanilabilir.

////////////////////////////////////////
=> Baslangic sayfasini degistirmek icin index.js dosyasinda oncelikle baslangic component'inin import edilmesi gerekir. import Login from './src2/Login'; seklinde import edilmedilir. Ikinci olarak baslangic component'inin AppRegistry.registerComponent(appName, () => Login); metodu ile ayarlanmasi gerekir. Aksi halde "Can't find variabl:App" hatasi  vercektir. 
=> React-native'de resimleri sergilemek icin image component'i kullanilir. image component'inin resimleri duzenlemek icin resizeMode isimleri bir property'si vardir. Bunun uzerinden resmin nasil goruntulenecegi ayarlanabilir. En ideal deger olarak ise contain kullanilir.
 => stackoverflow'da yesil tick dogru cevap anlamindadir. 
 => Dimensions API'si cihazin olculerini almak icin kullanilan API'dir. Dimensions.get('window') metodu cihazin olculerini getirir. Bunun uzerinden height ve width degelerine de ulasilabilir.
 => Image component'inin tintColor property'si ile png resimlerin rengi degistirilebilir.
 => Eger fazla sayida fazla component'i ana js dosyamiz icerisinde import edeceksek  bu durumda ana js dosyamiz import'larla sisecektir. Bu nedenle daha kullanilabilir olmasi icin componentlerin import edildigi ayri bir js dosyasi olusturup bu dosyayi ana js dosyamiz icerisinde import etmek gerekir. Boylece import edilen dosyalarin kontrolu kolaylasir hem de ana dosyamis sismemis olur. 
 => React'in kendisi de bir node.js projesidir..
 => react-native'de butona genislik verdiginde yuksekligi otomatik kendisi verir.
 =>  Ekranda buton ve textbox'lari olusturduktan sonra kullanici girmesi gerekenleri girdikten sonra butona basabilmesi icin ekranin kaymasi gerekir cunku klasyve acildiginda buton asagida kaldi. Bu nedenle bu durumun da duzeltilmesi gerekir. Scroll bu cozumlerden bir tanesidir. 
 =>  




